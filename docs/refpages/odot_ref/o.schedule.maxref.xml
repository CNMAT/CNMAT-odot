<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="o.whatever" module="odot">

	<digest>
		Dedline Scheduler for odot bundles using odot timetags
	</digest>

	<description>
		Stores incoming odot bundles and tries to output them at the time indicated by the timestamp.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">CNMAT</metadata>
		<metadata name="tag">odot</metadata>
		<metadata name="tag">odot objects</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="FullPacket">
			<digest>
				odot bundle
			</digest>
			<description>
				A bundle to schedule for future output.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="FullPacket">
			<digest>
				A copy of the input bundle
			</digest>
			<description>
				o.schedule obtains the scheduling time from a time tag bound to the address argument. That is, an instance of "o.schedule /now" will look for the address "/now" in incoming odot bundles. If that address contains a future timetag, o.schedule will wait until the time indicated before outputting the bundle.
			</description>
		</outlet>
		<outlet id="1" type="FullPacket">
			<digest>
				A copy of the input bundle that missed the deadline
			</digest>
			<description>
				In the event that a scheduled time tag already happened, o.schedule outputs the bundle immediately out of the second outlet.
			</description>
		</outlet>
		<outlet id="2" type="FullPacket">
			<digest>
				A copy of the input bundle that has an immediate timetag
			</digest>
			<description>
				Immediate timetags are output from the third outlet.
			</description>
		</outlet>
		<outlet id="3" type="FullPacket">
			<digest>
				A copy of the input bundle if the o.schedule queue is full
			</digest>
			<description>
				In the event that o.schedule runs out of memory for performing the scheduling, incoming bundles are forwarded out of the fourth (right-most) outlet.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="address" optional="1" type="symbol">
			<digest>
				An address containing a time tag to schedule
			</digest>
			<description>
				o.schedule obtains the scheduling time from a time tag bound to the address argument. That is, an instance of "o.schedule /now" will look for the address "/now" in incoming odot bundles. If that address contains a future timetag, o.schedule will wait until the time indicated before outputting the bundle.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="FullPacket [variable]">
			<arglist />
			<digest>
				odot bundle to schedule
			</digest>
			<description>
				o.schedule obtains the scheduling time from a time tag bound to the address argument. That is, an instance of "o.schedule /now" will look for the address "/now" in incoming odot bundles. If that address contains a future timetag, o.schedule will wait until the time indicated before outputting the bundle.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear the schedule queue
			</digest>
			<description>
				Clears all of the scheduled events from the queue.
			</description>
		</method>
		<method name="dictionary [variable]">
			<arglist />
			<digest>
				dictionary to convert to odot and schedule
			</digest>
			<description>
				o.schedule converts Max dictionaries into odot bundles and processes the bundles as it would a FullPacket.
			</description>
		</method>
		<method name="doc">
			<arglist />
			<digest>
				Output an odot bundle containing the documentation of the object
			</digest>
			<description>
				Outputs an odot bundle containing object name, short and long descriptions of object operation, inlet and outlet information, and see also (where available).
			</description>
		</method>
		<method name="version">
			<arglist />
			<digest>
				Get current version information
			</digest>
			<description>
				Prints the current odot build version to the Max Window.
			</description>
		</method>
	</methodlist>

	<!--DISCUSSION-->
	<discussion>
		o.schedule bears some similarity to a delay object -- it waits to output its inputs until the time indicated by the time tag argument. Unlike the delay object, however, o.schedule can be used to schedule large amounts of future events. The events do not have to be scheduled in order -- o.schedule will sort the events according to their time tags automatically. Deadline scheduling ensures that the error margins are not conflated, if one event's deadline is missed due to the system being overloaded, the timing of the following events will not be affected or delayed (there is no "drift").
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="o.timetag" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (FullPacket)">
			<description>
				An odot bundle to schedule
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (FullPacket)">
			<description>
				A copy of input, delayed until the time indicated by a time tag (FullPacket).
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
				o.schedule bears some similarity to a delay object -- it waits to output its inputs until the time indicated by the time tag argument. Unlike the delay object, however, o.schedule can be used to schedule large amounts of future events. The events do not have to be scheduled in order -- o.schedule will sort the events according to their time tags automatically. Deadline scheduling ensures that the error margins are not conflated, if one event's deadline is missed due to the system being overloaded, the timing of the following events will not be affected or delayed (there is no "drift").
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
				odot, address, bundle
			</description>
		</entry>
	</misc>

</c74object>