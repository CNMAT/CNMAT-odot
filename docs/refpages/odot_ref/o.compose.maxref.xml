<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="o.compose" module="odot">

	<digest>
		Create OSC bundles from text
	</digest>

	<description>
		o.compose converts its textual contents to OSC packets.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">CNMAT</metadata>
		<metadata name="tag">odot</metadata>
		<metadata name="tag">odot objects</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="bang">
			<digest>
				Trigger output
			</digest>
			<description>
				Use 'bang' to produce an odot bundle from textual contents.
			</description>
		</inlet>
		<inlet id="1" type="FullPacket">
			<digest>
				Set contents without output
			</digest>
			<description>
				FullPacket messages arriving to the right inlet will be evaluated and pretty-printed by the o.compose object without firing any outlets. Note that this action overwrites the contents of the o.compose box.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="FullPacket">
			<digest>
				OSC packet
			</digest>
			<description>
				An odot bundle parsed from the textual contents of the object.
			</description>
		</outlet>
	</outletlist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output contents
			</digest>
			<description>
				Output the contents as an odot bundle (FullPacket message) out of the left outlet.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear contents
			</digest>
			<description>
				Identical to providing an empty bundle to the right inlet or to a set message. Note that the clear box will produce a valid empty odot bundle when clicked or banged.
			</description>
		</method>
		<method name="doc">
			<arglist />
			<digest>
				Output an odot bundle containing the documentation of the object
			</digest>
			<description>
				Outputs an odot bundle containing object name, short and long descriptions of object operation, inlet and outlet information, and see also (where available).
			</description>
		</method>
		<method name="select">
			<arglist />
			<digest>
				Select all contents
			</digest>
			<description>
				Selects all textual content within the o.compose text box. Used to copy/paste the o.compose contents from a locked patcher.
			</description>
		</method>
		<method name="set">
			<arglist />
			<digest>
				Set the contents without output (identical to the right inlet)
			</digest>
			<description>
				The message "set" must be followed by a FullPacket message describing a valid odot bundle. The message will be parsed, formatted, and pretty-printed by the o.compose object. Outlets will not fire upon a "set" command.
			</description>
		</method>
		<method name="version">
			<arglist />
			<digest>
				Get current version information.
			</digest>
			<description>
				Prints the current odot build version to the Max Window.
			</description>
		</method>
	</methodlist>

	<!--DISCUSSION-->
	<discussion>
		o.compose is used to create odot bundle literals by typing in the text box. The bundle literal syntax consists of comma separated entries. Each entry contains:
		<ul>
			<li>an OSC address (e.g. /foo)</li>
			<li>a space, followed by a comma</li>
			<li>data to be bound to the address:</li>
			<ul>
				<li>numerical values require no additional symbols: /foo : 1 or /foo : 3.14159</li>
				<li>lists are enclosed in square brackets, items are separated by commas: /foo : [1, 2, 3]</li>
				<li>strings must be enclosed in double quotes</li>
				<li>sub-bundles must be enclosed in curly brackets: /foo : { /bar : "one", /boo : [1, "two", 3.14] }</li>
			</ul>
		</ul>

		Note: commas are used to separate items in lists and individual addresses in a bundle. A comma may not be used as a terminator (you may not have a comma at the end without another address following it).
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="o.display" />
		<seealso name="o.expr.codebox" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				Triggers output of an odot bundle.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (FullPacket)">
			<description>
				The resulting odot bundle (FullPacket).
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
				o.compose is used to create odot bundle literals by typing in the text box. The bundle literal syntax consists of comma separated entries. Each entry contains:
				<ul>
					<li>an OSC address (e.g. /foo)</li>
					<li>a space, followed by a colon</li>
					<li>data to be bound to the address:</li>
					<ul>
						<li>numerical values require no additional symbols: /foo : 1 or /foo : 3.14159</li>
						<li>lists are enclosed in square brackets, items are separated by commas: /foo : [1, 2, 3]</li>
						<li>strings must be enclosed in double quotes: /foo : "pickles"</li>
						<li>sub-bundles must be enclosed in curly brackets: /foo : { /bar : "one", /boo : [1, "two", 3.14] }</li>
					</ul>
				</ul>

				Note: commas are used to separate items in lists and individual addresses in a bundle. A comma may not be used as a terminator (you may not have a comma at the end without another address following it).
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
				odot, address, bundle
			</description>
		</entry>
	</misc>

</c74object>